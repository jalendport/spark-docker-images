name: Build and Push
on:
  workflow_call:
    inputs:
      image-name:
        required: true
        type: string
      filters:
        required: true
        type: string
      aliases:
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.filter-shared.outputs.result }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Filter paths with changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: ${{ inputs.filters }}
      - name: Filter out shared paths
        uses: yakubique/filter-json@v1.2
        id: filter-shared
        with:
          input: ${{ steps.filter.outputs.changes }}
          values: "shared"
  build:
    needs: changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJSON(needs.changes.outputs.images) }}
    if: ${{ needs.changes.outputs.images != '[]' }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Get version number
        uses: mad9000/actions-find-and-replace-string@bce4d50390d08b67e1822bd72fb54b3cf11b0ce9
        id: version
        with:
          source: ${{ matrix.version }}
          find: "${{ inputs.image-name }}-"
          replace: ""
      - name: Set up QEMU
        if: ${{ !github.event.act }}
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        if: ${{ !github.event.act }}
        uses: docker/setup-buildx-action@v3
        with:
          install: true
      - name: Get alias tags
        id: get-tags
        uses: mikefarah/yq@v4
        with:
          cmd: echo "${{ inputs.aliases }}" | yq '.["${{ inputs.image-name }}-${{ steps.version.outputs.value }}"] | map(. | tostring)' -o=json
      - name: Generate dynamic tags
        id: generate-tags
        run: |
          readarray -t tags <<< "$(echo '${{ steps.get-tags.outputs.result }}' | jq -r '.[]?')"
          TAGS="type=raw,value=${{ steps.version.outputs.value }},enable=true,priority=200"
          for tag in "${tags[@]}"; do
            if [[ -z "$tag" ]]; then
              continue
            fi
            if [[ "$tag" == "latest" ]]; then
              priority=1000
            elif [[ "$tag" == latest-* ]]; then
              priority=900
            else
              priority=200
            fi
            TAGS="$TAGS\ntype=raw,value=${tag},enable=true,priority=$priority"
          done
          echo "tags<<EOF" >> $GITHUB_OUTPUT
          echo -e "$TAGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Generate Docker meta
        if: ${{ !github.event.act }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: jalendport/spark-${{ inputs.image-name }}
          tags: |
            ${{ steps.generate-tags.outputs.tags }}
      - name: Log in to Docker Hub
        if: ${{ !github.event.act }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        if: ${{ !github.event.act }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.image-name }}/${{ steps.version.outputs.value }}
          file: ${{ inputs.image-name }}/${{ steps.version.outputs.value }}/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
      - name: Update Docker image description
        if: ${{ !github.event.act }}
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: jalendport/spark-${{ inputs.image-name }}
          readme-filepath: ${{ inputs.image-name }}/README.md
          short-description: ${{ github.event.repository.description }}
